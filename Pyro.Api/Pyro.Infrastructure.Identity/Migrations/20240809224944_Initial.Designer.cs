// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pyro.Infrastructure.Identity.DataAccess;

#nullable disable

namespace Pyro.Infrastructure.Identity.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20240809224944_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Pyro.Domain.Identity.Models.AccessToken", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("salt")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("BLOB")
                        .HasColumnName("Salt");

                    b.Property<byte[]>("token")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("BLOB")
                        .HasColumnName("Token");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_AccessTokens_Name");

                    b.HasIndex("UserId");

                    b.ToTable("AccessTokens", (string)null);
                });

            modelBuilder.Entity("Pyro.Domain.Identity.Models.AuthenticationToken", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("TokenId")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("TokenId")
                        .IsUnique()
                        .HasDatabaseName("IX_AuthenticationTokens_TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("AuthenticationTokens", (string)null);
                });

            modelBuilder.Entity("Pyro.Domain.Identity.Models.Permission", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Permissions_Name");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 253, 217, 90, 246, 89, 162, 152, 69, 128, 58, 248, 86, 7, 199, 86, 107 },
                            Name = "repository.view"
                        },
                        new
                        {
                            Id = new byte[] { 68, 139, 243, 237, 80, 177, 223, 70, 188, 121, 173, 170, 60, 1, 101, 159 },
                            Name = "repository.edit"
                        },
                        new
                        {
                            Id = new byte[] { 112, 196, 64, 167, 234, 52, 196, 70, 140, 160, 220, 105, 46, 31, 180, 35 },
                            Name = "repository.manage"
                        },
                        new
                        {
                            Id = new byte[] { 45, 215, 254, 149, 179, 144, 4, 65, 137, 30, 167, 218, 231, 234, 68, 5 },
                            Name = "user.view"
                        },
                        new
                        {
                            Id = new byte[] { 57, 33, 24, 44, 93, 8, 81, 72, 170, 59, 202, 33, 142, 231, 126, 112 },
                            Name = "user.edit"
                        },
                        new
                        {
                            Id = new byte[] { 118, 102, 168, 230, 116, 15, 0, 77, 169, 183, 252, 132, 160, 101, 214, 115 },
                            Name = "user.manage"
                        },
                        new
                        {
                            Id = new byte[] { 7, 26, 53, 106, 110, 179, 126, 65, 140, 172, 51, 248, 111, 65, 48, 17 },
                            Name = "issue.view"
                        },
                        new
                        {
                            Id = new byte[] { 175, 99, 54, 119, 36, 94, 104, 68, 152, 194, 96, 121, 87, 70, 158, 140 },
                            Name = "issue.edit"
                        },
                        new
                        {
                            Id = new byte[] { 111, 60, 124, 50, 244, 238, 2, 79, 184, 101, 202, 180, 209, 229, 80, 249 },
                            Name = "issue.manage"
                        });
                });

            modelBuilder.Entity("Pyro.Domain.Identity.Models.Role", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Name");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 },
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new byte[] { 14, 226, 185, 54, 107, 155, 27, 70, 177, 41, 214, 164, 159, 228, 244, 248 },
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Pyro.Domain.Identity.Models.SigningKey", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SigningKeys", (string)null);
                });

            modelBuilder.Entity("Pyro.Domain.Identity.Models.User", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB");

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("BLOB")
                        .HasColumnName("Password");

                    b.Property<byte[]>("salt")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("BLOB")
                        .HasColumnName("Salt");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Login");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 122, 5, 186, 249, 176, 53, 16, 77, 131, 38, 112, 45, 143, 126, 201, 102 },
                            IsLocked = false,
                            Login = "pyro",
                            password = new byte[] { 239, 163, 54, 78, 41, 129, 181, 60, 27, 181, 100, 116, 243, 128, 253, 209, 87, 147, 27, 73, 138, 190, 50, 65, 18, 253, 153, 127, 194, 97, 240, 29, 179, 58, 68, 117, 170, 97, 172, 236, 70, 27, 167, 168, 87, 3, 66, 53, 11, 34, 206, 209, 211, 150, 81, 227, 19, 161, 249, 24, 45, 138, 206, 197 },
                            salt = new byte[] { 109, 28, 230, 18, 208, 250, 67, 218, 171, 6, 152, 200, 162, 109, 186, 132 }
                        });
                });

            modelBuilder.Entity("RolePermission", b =>
                {
                    b.Property<byte[]>("RoleId")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PermissionId")
                        .HasColumnType("BLOB");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 },
                            PermissionId = new byte[] { 253, 217, 90, 246, 89, 162, 152, 69, 128, 58, 248, 86, 7, 199, 86, 107 }
                        },
                        new
                        {
                            RoleId = new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 },
                            PermissionId = new byte[] { 68, 139, 243, 237, 80, 177, 223, 70, 188, 121, 173, 170, 60, 1, 101, 159 }
                        },
                        new
                        {
                            RoleId = new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 },
                            PermissionId = new byte[] { 112, 196, 64, 167, 234, 52, 196, 70, 140, 160, 220, 105, 46, 31, 180, 35 }
                        },
                        new
                        {
                            RoleId = new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 },
                            PermissionId = new byte[] { 45, 215, 254, 149, 179, 144, 4, 65, 137, 30, 167, 218, 231, 234, 68, 5 }
                        },
                        new
                        {
                            RoleId = new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 },
                            PermissionId = new byte[] { 57, 33, 24, 44, 93, 8, 81, 72, 170, 59, 202, 33, 142, 231, 126, 112 }
                        },
                        new
                        {
                            RoleId = new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 },
                            PermissionId = new byte[] { 118, 102, 168, 230, 116, 15, 0, 77, 169, 183, 252, 132, 160, 101, 214, 115 }
                        },
                        new
                        {
                            RoleId = new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 },
                            PermissionId = new byte[] { 7, 26, 53, 106, 110, 179, 126, 65, 140, 172, 51, 248, 111, 65, 48, 17 }
                        },
                        new
                        {
                            RoleId = new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 },
                            PermissionId = new byte[] { 175, 99, 54, 119, 36, 94, 104, 68, 152, 194, 96, 121, 87, 70, 158, 140 }
                        },
                        new
                        {
                            RoleId = new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 },
                            PermissionId = new byte[] { 111, 60, 124, 50, 244, 238, 2, 79, 184, 101, 202, 180, 209, 229, 80, 249 }
                        },
                        new
                        {
                            RoleId = new byte[] { 14, 226, 185, 54, 107, 155, 27, 70, 177, 41, 214, 164, 159, 228, 244, 248 },
                            PermissionId = new byte[] { 253, 217, 90, 246, 89, 162, 152, 69, 128, 58, 248, 86, 7, 199, 86, 107 }
                        },
                        new
                        {
                            RoleId = new byte[] { 14, 226, 185, 54, 107, 155, 27, 70, 177, 41, 214, 164, 159, 228, 244, 248 },
                            PermissionId = new byte[] { 68, 139, 243, 237, 80, 177, 223, 70, 188, 121, 173, 170, 60, 1, 101, 159 }
                        },
                        new
                        {
                            RoleId = new byte[] { 14, 226, 185, 54, 107, 155, 27, 70, 177, 41, 214, 164, 159, 228, 244, 248 },
                            PermissionId = new byte[] { 45, 215, 254, 149, 179, 144, 4, 65, 137, 30, 167, 218, 231, 234, 68, 5 }
                        },
                        new
                        {
                            RoleId = new byte[] { 14, 226, 185, 54, 107, 155, 27, 70, 177, 41, 214, 164, 159, 228, 244, 248 },
                            PermissionId = new byte[] { 57, 33, 24, 44, 93, 8, 81, 72, 170, 59, 202, 33, 142, 231, 126, 112 }
                        },
                        new
                        {
                            RoleId = new byte[] { 14, 226, 185, 54, 107, 155, 27, 70, 177, 41, 214, 164, 159, 228, 244, 248 },
                            PermissionId = new byte[] { 7, 26, 53, 106, 110, 179, 126, 65, 140, 172, 51, 248, 111, 65, 48, 17 }
                        },
                        new
                        {
                            RoleId = new byte[] { 14, 226, 185, 54, 107, 155, 27, 70, 177, 41, 214, 164, 159, 228, 244, 248 },
                            PermissionId = new byte[] { 175, 99, 54, 119, 36, 94, 104, 68, 152, 194, 96, 121, 87, 70, 158, 140 }
                        });
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<byte[]>("UserId")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("RoleId")
                        .HasColumnType("BLOB");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new byte[] { 122, 5, 186, 249, 176, 53, 16, 77, 131, 38, 112, 45, 143, 126, 201, 102 },
                            RoleId = new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 }
                        });
                });

            modelBuilder.Entity("Pyro.Domain.Identity.Models.AccessToken", b =>
                {
                    b.HasOne("Pyro.Domain.Identity.Models.User", null)
                        .WithMany("AccessTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pyro.Domain.Identity.Models.AuthenticationToken", b =>
                {
                    b.HasOne("Pyro.Domain.Identity.Models.User", "User")
                        .WithMany("AuthenticationTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RolePermission", b =>
                {
                    b.HasOne("Pyro.Domain.Identity.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pyro.Domain.Identity.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("Pyro.Domain.Identity.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pyro.Domain.Identity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pyro.Domain.Identity.Models.User", b =>
                {
                    b.Navigation("AccessTokens");

                    b.Navigation("AuthenticationTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
