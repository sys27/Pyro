// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional

namespace Pyro.Infrastructure.Identity.Migrations
{
    /// <inheritdoc />
    public partial class Initial : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Permissions",
                columns: table => new
                {
                    Id = table.Column<byte[]>(type: "BLOB", nullable: false),
                    Name = table.Column<string>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Permissions", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Roles",
                columns: table => new
                {
                    Id = table.Column<byte[]>(type: "BLOB", nullable: false),
                    Name = table.Column<string>(type: "TEXT", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Roles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SigningKeys",
                columns: table => new
                {
                    Id = table.Column<byte[]>(type: "BLOB", nullable: false),
                    Key = table.Column<string>(type: "TEXT", nullable: false),
                    CreatedAt = table.Column<DateTimeOffset>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SigningKeys", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    Id = table.Column<byte[]>(type: "BLOB", nullable: false),
                    Login = table.Column<string>(type: "TEXT", maxLength: 32, nullable: false),
                    IsLocked = table.Column<bool>(type: "INTEGER", nullable: false, defaultValue: false),
                    Password = table.Column<byte[]>(type: "BLOB", maxLength: 64, nullable: false),
                    Salt = table.Column<byte[]>(type: "BLOB", maxLength: 16, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RolePermissions",
                columns: table => new
                {
                    RoleId = table.Column<byte[]>(type: "BLOB", nullable: false),
                    PermissionId = table.Column<byte[]>(type: "BLOB", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RolePermissions", x => new { x.RoleId, x.PermissionId });
                    table.ForeignKey(
                        name: "FK_RolePermissions_Permissions_PermissionId",
                        column: x => x.PermissionId,
                        principalTable: "Permissions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_RolePermissions_Roles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "Roles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AccessTokens",
                columns: table => new
                {
                    Id = table.Column<byte[]>(type: "BLOB", nullable: false),
                    Name = table.Column<string>(type: "TEXT", maxLength: 50, nullable: false),
                    ExpiresAt = table.Column<DateTimeOffset>(type: "TEXT", nullable: false),
                    UserId = table.Column<byte[]>(type: "BLOB", nullable: false),
                    Salt = table.Column<byte[]>(type: "BLOB", maxLength: 16, nullable: false),
                    Token = table.Column<byte[]>(type: "BLOB", maxLength: 64, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccessTokens", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AccessTokens_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AuthenticationTokens",
                columns: table => new
                {
                    Id = table.Column<byte[]>(type: "BLOB", nullable: false),
                    TokenId = table.Column<byte[]>(type: "BLOB", nullable: false),
                    ExpiresAt = table.Column<DateTimeOffset>(type: "TEXT", nullable: false),
                    UserId = table.Column<byte[]>(type: "BLOB", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuthenticationTokens", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuthenticationTokens_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UserRoles",
                columns: table => new
                {
                    UserId = table.Column<byte[]>(type: "BLOB", nullable: false),
                    RoleId = table.Column<byte[]>(type: "BLOB", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_UserRoles_Roles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "Roles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UserRoles_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.InsertData(
                table: "Permissions",
                columns: new[] { "Id", "Name" },
                values: new object[,]
                {
                    { new byte[] { 253, 217, 90, 246, 89, 162, 152, 69, 128, 58, 248, 86, 7, 199, 86, 107 }, "repository.view" },
                    { new byte[] { 68, 139, 243, 237, 80, 177, 223, 70, 188, 121, 173, 170, 60, 1, 101, 159 }, "repository.edit" },
                    { new byte[] { 112, 196, 64, 167, 234, 52, 196, 70, 140, 160, 220, 105, 46, 31, 180, 35 }, "repository.manage" },
                    { new byte[] { 45, 215, 254, 149, 179, 144, 4, 65, 137, 30, 167, 218, 231, 234, 68, 5 }, "user.view" },
                    { new byte[] { 57, 33, 24, 44, 93, 8, 81, 72, 170, 59, 202, 33, 142, 231, 126, 112 }, "user.edit" },
                    { new byte[] { 118, 102, 168, 230, 116, 15, 0, 77, 169, 183, 252, 132, 160, 101, 214, 115 }, "user.manage" },
                    { new byte[] { 7, 26, 53, 106, 110, 179, 126, 65, 140, 172, 51, 248, 111, 65, 48, 17 }, "issue.view" },
                    { new byte[] { 175, 99, 54, 119, 36, 94, 104, 68, 152, 194, 96, 121, 87, 70, 158, 140 }, "issue.edit" },
                    { new byte[] { 111, 60, 124, 50, 244, 238, 2, 79, 184, 101, 202, 180, 209, 229, 80, 249 }, "issue.manage" }
                });

            migrationBuilder.InsertData(
                table: "Roles",
                columns: new[] { "Id", "Name" },
                values: new object[,]
                {
                    { new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 }, "Admin" },
                    { new byte[] { 14, 226, 185, 54, 107, 155, 27, 70, 177, 41, 214, 164, 159, 228, 244, 248 }, "User" }
                });

            migrationBuilder.InsertData(
                table: "Users",
                columns: new[] { "Id", "Login", "Password", "Salt" },
                values: new object[] { new byte[] { 122, 5, 186, 249, 176, 53, 16, 77, 131, 38, 112, 45, 143, 126, 201, 102 }, "pyro", new byte[] { 239, 163, 54, 78, 41, 129, 181, 60, 27, 181, 100, 116, 243, 128, 253, 209, 87, 147, 27, 73, 138, 190, 50, 65, 18, 253, 153, 127, 194, 97, 240, 29, 179, 58, 68, 117, 170, 97, 172, 236, 70, 27, 167, 168, 87, 3, 66, 53, 11, 34, 206, 209, 211, 150, 81, 227, 19, 161, 249, 24, 45, 138, 206, 197 }, new byte[] { 109, 28, 230, 18, 208, 250, 67, 218, 171, 6, 152, 200, 162, 109, 186, 132 } });

            migrationBuilder.InsertData(
                table: "RolePermissions",
                columns: new[] { "PermissionId", "RoleId" },
                values: new object[,]
                {
                    { new byte[] { 253, 217, 90, 246, 89, 162, 152, 69, 128, 58, 248, 86, 7, 199, 86, 107 }, new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 } },
                    { new byte[] { 68, 139, 243, 237, 80, 177, 223, 70, 188, 121, 173, 170, 60, 1, 101, 159 }, new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 } },
                    { new byte[] { 112, 196, 64, 167, 234, 52, 196, 70, 140, 160, 220, 105, 46, 31, 180, 35 }, new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 } },
                    { new byte[] { 45, 215, 254, 149, 179, 144, 4, 65, 137, 30, 167, 218, 231, 234, 68, 5 }, new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 } },
                    { new byte[] { 57, 33, 24, 44, 93, 8, 81, 72, 170, 59, 202, 33, 142, 231, 126, 112 }, new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 } },
                    { new byte[] { 118, 102, 168, 230, 116, 15, 0, 77, 169, 183, 252, 132, 160, 101, 214, 115 }, new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 } },
                    { new byte[] { 7, 26, 53, 106, 110, 179, 126, 65, 140, 172, 51, 248, 111, 65, 48, 17 }, new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 } },
                    { new byte[] { 175, 99, 54, 119, 36, 94, 104, 68, 152, 194, 96, 121, 87, 70, 158, 140 }, new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 } },
                    { new byte[] { 111, 60, 124, 50, 244, 238, 2, 79, 184, 101, 202, 180, 209, 229, 80, 249 }, new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 } },
                    { new byte[] { 253, 217, 90, 246, 89, 162, 152, 69, 128, 58, 248, 86, 7, 199, 86, 107 }, new byte[] { 14, 226, 185, 54, 107, 155, 27, 70, 177, 41, 214, 164, 159, 228, 244, 248 } },
                    { new byte[] { 68, 139, 243, 237, 80, 177, 223, 70, 188, 121, 173, 170, 60, 1, 101, 159 }, new byte[] { 14, 226, 185, 54, 107, 155, 27, 70, 177, 41, 214, 164, 159, 228, 244, 248 } },
                    { new byte[] { 45, 215, 254, 149, 179, 144, 4, 65, 137, 30, 167, 218, 231, 234, 68, 5 }, new byte[] { 14, 226, 185, 54, 107, 155, 27, 70, 177, 41, 214, 164, 159, 228, 244, 248 } },
                    { new byte[] { 57, 33, 24, 44, 93, 8, 81, 72, 170, 59, 202, 33, 142, 231, 126, 112 }, new byte[] { 14, 226, 185, 54, 107, 155, 27, 70, 177, 41, 214, 164, 159, 228, 244, 248 } },
                    { new byte[] { 7, 26, 53, 106, 110, 179, 126, 65, 140, 172, 51, 248, 111, 65, 48, 17 }, new byte[] { 14, 226, 185, 54, 107, 155, 27, 70, 177, 41, 214, 164, 159, 228, 244, 248 } },
                    { new byte[] { 175, 99, 54, 119, 36, 94, 104, 68, 152, 194, 96, 121, 87, 70, 158, 140 }, new byte[] { 14, 226, 185, 54, 107, 155, 27, 70, 177, 41, 214, 164, 159, 228, 244, 248 } }
                });

            migrationBuilder.InsertData(
                table: "UserRoles",
                columns: new[] { "RoleId", "UserId" },
                values: new object[] { new byte[] { 235, 147, 169, 154, 219, 227, 206, 79, 186, 159, 176, 187, 35, 57, 91, 157 }, new byte[] { 122, 5, 186, 249, 176, 53, 16, 77, 131, 38, 112, 45, 143, 126, 201, 102 } });

            migrationBuilder.CreateIndex(
                name: "IX_AccessTokens_Name",
                table: "AccessTokens",
                column: "Name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AccessTokens_UserId",
                table: "AccessTokens",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AuthenticationTokens_TokenId",
                table: "AuthenticationTokens",
                column: "TokenId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AuthenticationTokens_UserId",
                table: "AuthenticationTokens",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Permissions_Name",
                table: "Permissions",
                column: "Name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_RolePermissions_PermissionId",
                table: "RolePermissions",
                column: "PermissionId");

            migrationBuilder.CreateIndex(
                name: "IX_Roles_Name",
                table: "Roles",
                column: "Name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_UserRoles_RoleId",
                table: "UserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "IX_Users_Login",
                table: "Users",
                column: "Login",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "AccessTokens");

            migrationBuilder.DropTable(
                name: "AuthenticationTokens");

            migrationBuilder.DropTable(
                name: "RolePermissions");

            migrationBuilder.DropTable(
                name: "SigningKeys");

            migrationBuilder.DropTable(
                name: "UserRoles");

            migrationBuilder.DropTable(
                name: "Permissions");

            migrationBuilder.DropTable(
                name: "Roles");

            migrationBuilder.DropTable(
                name: "Users");
        }
    }
}